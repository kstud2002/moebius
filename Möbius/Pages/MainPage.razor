@page "/counter"

<input @bind-value=@ScoreToWin />
<input @bind-value=@MaxNumberOfTries />
<br />
<PageTitle>Counter</PageTitle>
<button @onclick=ShuffleDeck>SHUFFLE</button>

<div style="display: flex; justify-content: space-between;">
    <span style="display: flex; flex-direction: column;">
        <span>
            <input @bind-value="Column1Value" @bind-value:event="oninput" />
            <button @onclick="() => ResetList(1)">RESET</button>
        </span>

        @foreach (var item in InitialColumn1)
        {
            <span>@item.ToUpper()</span>
        }
    </span>
    <span style="display: flex; flex-direction: column;">
        <span>
            <input @bind-value="Column2Value" @bind-value:event="oninput" />
            <button @onclick="() => ResetList(2)">RESET</button>
        </span>

        @foreach (var item in InitialColumn2)
        {
            <span>@item.ToUpper()</span>
        }
    </span>
    <span style="display: flex; flex-direction: column;">
        <span>
            <input @bind-value="Column3Value" @bind-value:event="oninput" />
            <button @onclick="() => ResetList(3)">RESET</button>
        </span>

        @foreach (var item in InitialColumn3)
        {
            <span>@item.ToUpper()</span>
        }
    </span>
    <span style="display: flex; flex-direction: column;">
        <span>
            <input @bind-value="Column4Value" @bind-value:event="oninput" />
            <button @onclick="() => ResetList(4)">RESET</button>
        </span>

        @foreach (var item in InitialColumn4)
        {
            <span>@item.ToUpper()</span>
        }
    </span>
</div>

<div class="d-flex justify-content-center">
    <button disabled="@IsReadyForSolve()" @onclick=Win>SOLVE</button>
</div>

<p class="d-flex justify-content-center">Number of Tries: @NumberOfTries | Score: @Score</p>

<p>
    <table class="minimalistBlack">
        <thead>
            <tr>
                <th>
                    Step
                </th>
                <th>
                    Total
                </th>
                <th>
                    Steps
                </th>
                <th>
                    Points
                </th>
            </tr>
        </thead>
        @foreach (var step in Steps)
        {
            <tr>
                <td>
                    Step @(Steps.IndexOf(step) + 1)
                </td>
                <td>
                    @Math.Floor(RoundTotalTotals.ElementAt(Steps.IndexOf(step)))
                </td>
                <td>
                    @{
                        foreach (var card in step)
                        {
                            <div>
                                @card.Item1: @ConvertToString(card.Item2)
                            </div>
                        }
                    }
                </td>
                <td>
                    @foreach (var point in RoundScores.ElementAt(Steps.IndexOf(step)).values)
                    {
                        @if (point.points != 0)
                        {
                            <div>
                                @point.bonus: @point.points
                            </div>
                        }
                    }
                    <strong>Total: @RoundScores.ElementAt(Steps.IndexOf(step)).total / Running Total: @RoundScores.ElementAt(Steps.IndexOf(step)).runningTotal</strong>
                </td>
            </tr>
        }
    </table>
</p>
